dependencies: No dependencies
description: A plugin
modified: 20140417224552088
modifier: Danielo
plugin-type: plugin
title: $:/plugins/Danielos/Pluginame
type: application/json
version: 0.0.1

{
    "tiddlers": {
        "$:/plugins/Danielos/Pluginame/New Tiddler 1": {
            "modified": "20140415181306996",
            "modifier": "Danielo",
            "text": "",
            "title": "$:/plugins/Danielos/Pluginame/New Tiddler 1",
            "creator": "Danielo",
            "created": "20140415181304146"
        },
        "$:/plugins/Danielos/Pluginame/packPlugin.js": {
            "modified": "20140417180618258",
            "modifier": "Danielo",
            "text": "/*\\\ntitle: $:/plugins/danielo/packAsPlugin/packAsPlugin.js\ntype: application/javascript\nmodule-type: widget\n\nencrypttiddler widget\n\n```\n\n```\n\n\n\\*/\n(function (){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar Widget = require(\"$:/core/modules/widgets/widget.js\").widget;\n\nvar packAsPlugin = function (parseTreeNode,options) {\n    this.initialise(parseTreeNode,options);\n    this.addEventListeners([\n            {type: \"tw-pack-plugin\", handler: \"handlePackevent\"},\n            {type: \"tw-unpack-plugin\", handler: \"handleUnpackevent\"}\n            ]);\n};\n\n/*\nInherit from the base widget class\n*/\npackAsPlugin.prototype = new Widget();\n\n/*\nRender this widget into the DOM\n*/\npackAsPlugin.prototype.render = function (parent,nextSibling) {\n    this.parentDomNode = parent;\n    this.computeAttributes();\n    this.execute();\n    this.renderChildren(parent,nextSibling);\n};\n\n/*\nCompute the internal state of the widget\n*/\npackAsPlugin.prototype.execute = function () {\n    // Get attributes\n     this.pluginDependencies=this.getAttribute(\"dependencies\");\n       this.pluginDescription=this.getAttribute(\"description\") || \"plugin packed with Danielo's pack plugin\";\n     this.pluginType=this.getAttribute(\"type\") || \"plugin\";\n      this.pluginVersion=this.getAttribute(\"version\");\n\n      this.pluginAuthor=this.getAttribute(\"author\",$tw.wiki.getTiddlerText(\"$:/status/UserName\") || \"Danielo\" );\n      this.pluginName=this.getAttribute(\"name\",\"yourPlugin\") || \"aPlugin\" ;\n\n     this.tiddlersFilter=this.getAttribute(\"filter\",\"[!is[system]!is[shadow]!has[draft.of]]\");\n    // Construct the child widgets\n    console.log(\"Execute: \"+this.pluginAuthor+\"-Name:\"+this.pluginName+\"-filter:\"+this.tiddlersFilter);\n\tthis.makeChildWidgets();\n\n};\n\n/*\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n*/\npackAsPlugin.prototype.refresh = function (changedTiddlers) {\n    var changedAttributes = this.computeAttributes();\n    if(changedAttributes.tiddler || changedAttributes.name || changedAttributes.description ||\n       changedAttributes.author || changedAttributes.filter || changedAttributes.type || changedAttributes.description) {\n        this.refreshSelf(); //looks this function call the execute function again.\n                            //Because this you can see the log of the execute function and then this one below.\n            console.log(\"refresh: \"+this.pluginAuthor+\"-Name:\"+this.pluginName+\"-filter:\"+this.tiddlersFilter);\n\n        return true;\n    } else {\n        return this.refreshChildren(changedTiddlers);\n    }\n};\n\npackAsPlugin.prototype.handlePackevent = function (event){\n    var pluginFields=this.createPluginTiddler();\n    var sourceTiddlers=this.wiki.filterTiddlers(this.tiddlersFilter);\n    var components=[];\n    console.log(\"Pack of plugins to include [\"+sourceTiddlers+\"]\");\n    for(var i=0;i<sourceTiddlers.length;i++){\n        components.push(this.createComponentTiddler(sourceTiddlers[i]));\n        console.log(\"Packing: \"+sourceTiddlers[i]);\n        }\n\n    this.saveTiddler(\"\",pluginFields);\n    console.log(\"Created plugin tiddler \"+pluginFields.title + \" Version \"+pluginFields.version);\n    $tw.utils.repackPlugin(pluginFields.title,components);\n\n    this.setVariable(\"resultPlugin\",pluginFields.title);\n};\n\npackAsPlugin.prototype.handleUnpackevent = function (event){\n//WIP\n};\n\npackAsPlugin.prototype.getBasicTitle = function (){ return \"$:/plugins/\"+this.pluginAuthor+\"/\"+this.pluginName };\n\npackAsPlugin.prototype.createComponentTitle = function (componentName){\nreturn this.getBasicTitle()+\"/\"+this.basename(componentName)\n};\n\npackAsPlugin.prototype.basename = function (path) {\n    return path.replace(/\\\\/g,'/').replace( /.*\\//, '' );\n};\n\npackAsPlugin.prototype.createComponentTiddler = function (originalTitle){\n    var tiddler=this.wiki.getTiddler(originalTitle);\n    if(tiddler){\n        var componentTitle = this.createComponentTitle(originalTitle);\n        this.saveTiddler(tiddler,{title:componentTitle});\n        console.log(\"Created \"+componentTitle);\n        return componentTitle;\n    }\n};\n\n\npackAsPlugin.prototype.createPluginTiddler = function (){\n    var previousVersion = this.wiki.getTiddler(this.getBasicTitle());\n    this.pluginVersion = previousVersion ? previousVersion.fields.version : this.pluginVersion;\n    var fields={\n                    title:this.getBasicTitle(),\n                    dependencies: this.pluginDependencies,\n                    description: this.pluginDescription,\n                    version:this.pluginVersion,\n                    \"plugin-type\":this.pluginType,\n                    type:\"application/json\",\n                    text: JSON.stringify({tiddlers:{}})\n                };\n        return fields;\n};\n\npackAsPlugin.prototype.saveTiddler=function (tiddler,fields){\n    this.wiki.addTiddler(  new $tw.Tiddler(this.wiki.getModificationFields(),tiddler,fields ) );\n};\n\nexports.packPlugin = packAsPlugin;\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/Danielos/Pluginame/packPlugin.js",
            "module-type": "widget",
            "creator": "Danielo",
            "created": "20140415162023177"
        },
        "$:/plugins/Danielos/Pluginame/pluginPacker": {
            "modified": "20140417224520878",
            "modifier": "Danielo",
            "created": "20140415181112002",
            "creator": "Danielo",
            "text": "\\define tag-styles()\nbackground-color:$(backgroundColor)$;\n\\end\n\n\\define tag-filter() [![$:/temp/search]!has[draft.of]!is[current]$(systemFilter)$$(shadowFilter)$$(searchFilter)$$(tagNames)$sort[title]]\n\n\\define show-system()\n<small><div> <em> System:</em> <$radio field=\"systemfilter\" value=\"\">  Show </$radio> <$radio field=\"systemfilter\" value=\"!is[system]\"> Hide </$radio></div></small>\n\\end\n\n\n<$edit-text tiddler=\"$:/tempPlugin\" tag=\"input\" field=\"pluginname\" placeholder=\"Plugin name\"/>\n<$edit-text tiddler=\"$:/tempPlugin\" tag=\"input\" field=\"pluginauthor\" default={{$:/status/UserName}} placeholder=\"Author(def:wiki author)\"/>\n<$edit-text tiddler=\"$:/tempPlugin\" tag=\"input\" field=\"pluginversion\" placeholder=\"version (automatic)\"/>\n<$edit-text tiddler=\"$:/tempPlugin\" tag=\"input\" field=\"plugindep\" placeholder=\"dependencies\"/>\n<$edit-text tiddler=\"$:/tempPlugin\" tag=\"input\" field=\"plugindesc\" placeholder=\"description\"/>\n<$edit-text tiddler=\"$:/tempPlugin\" tag=\"input\" field=\"plugintype\" placeholder=\"type\" default=\"plugin\"/>\n\nFilter for included tiddlers: <$edit-text tiddler=\"$:/tempPluginFilter\" tag=\"input\"  placeholder=\"dependencies\"/> <$button set=\"$:/tempPluginFilter\" setTo=\"[list[$:/StoryList]]-[is[current]]\">Use Open</$button>\n\n\n\n<div class=\"tw-search\"><$edit-text tiddler=\"$:/temp/search\" type=\"search\" tag=\"input\"/> <$reveal state=\"$:/temp/search\" type=\"nomatch\" text=\"\"><$linkcatcher to=\"$:/temp/search\"><$link to=\"\" class=\"btn-invisible\">{{$:/core/images/close-button}}</$link></$linkcatcher></$reveal><$reveal state=\"$:/temp/search\" type=\"match\" text=\"\"> &nbsp;<$link to=\"$:/AdvancedSearch\" class=\"btn-invisible\">&hellip;</$link></$reveal></div>\n<$fieldmangler tiddler=\"$:/temp/search\">\n<div class=\"tw-edit-add-tag\">\n<span class=\"tw-add-tag-name\">\n<$edit-text tiddler=\"$:/temp/NewTagName\" tag=\"input\" default=\"\" placeholder={{$:/language/EditTemplate/Tags/Add/Placeholder}} focusPopup=<<qualify \"$:/state/tagsAutoComplete\">> class=\"tw-edit-texteditor\"/>\n</span><span class=\"tw-add-tag-button\">\n<$button message=\"tw-add-tag\" param={{$:/temp/NewTagName}} set=\"$:/temp/NewTagName\" setTo=\"\" class=\"btn-invisible\">\n{{$:/core/images/new-button}}</$button>\n</span>\n</div>\n\n<div class=\"tw-block-dropdown-wrapper\">\n<$reveal state=<<qualify \"$:/state/tagsAutoComplete\">> type=\"nomatch\" text=\"\" default=\"\">\n<div class=\"tw-block-dropdown\">\n<$linkcatcher set=\"$:/temp/NewTagName\" setTo=\"\" message=\"tw-add-tag\">\n<$list filter=\"[!is[shadow]tags[]search{$:/temp/NewTagName}sort[title]]-[[$:/temp/search]tags[]]\">\n<$link>\n<$set name=\"backgroundColor\" value={{!!color}}>\n<span style=<<tag-styles>> class=\"tw-tag-label\">\n<$view field=\"title\" format=\"text\"/>\n</span>\n</$set>\n</$link>\n</$list>\n</$linkcatcher>\n</div>\n</$reveal>\n</div>\n<$list filter=\"[[$:/temp/search]tags[]sort[title]]\" storyview=\"pop\"><$set name=\"backgroundColor\" value={{!!color}}><span style=<<tag-styles>> class=\"tw-tag-label\">\n<$view field=\"title\" format=\"text\" />\n<$button message=\"tw-remove-tag\" param={{!!title}} class=\"btn-invisible tw-remove-tag-button\">&times;</$button></span>\n</$set>\n</$list>\n</$fieldmangler>\n <div style=\"display:inline;\"><<show-system>></div>\n<$set name=\"searchFilter\" value=<<search-filter \"$:/temp/search\">> >\n<$set name=\"tagNames\" value=<<extractTagsAsFilter \"$:/temp/search\">> >\n<$set name=\"systemFilter\" value={{!!systemfilter}}>\nTiddlers to be included in the plugin:\n<$list filter=<<tag-filter>>>\n\n</$list>\n\n\n\n<$packPlugin name={{$:/tempPlugin!!pluginname}} dependencies={{$:/tempPlugin!!plugindep}} filter=<<tag-filter>>  description={{$:/tempPlugin!!plugindesc}} type={{$:/tempPlugin!!plugintype}} author={{$:/tempPlugin!!pluginauthor}}>\n\n\n<$button message=\"tw-pack-plugin\">pack</$button>\n\n</$packPlugin>\n</$set></$set></$set>\n",
            "title": "$:/plugins/Danielos/Pluginame/pluginPacker",
            "systemfilter": "!is[system]"
        }
    }
}